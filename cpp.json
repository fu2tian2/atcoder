{
	"header": {
		"prefix": "header",
		"body": [
			"#include <bits/stdc++.h>"
			"using namespace std;"
			"typedef long long ll; //int:2*10**9"
			"typedef long double ld;"
			"typedef pair<ll,ll> P;"
			"#define REP(i,n) for(ll i = 0; i<(ll)(n); i++)"
			"#define FOR(i,a,b) for(ll i=(a);i<=(b);i++)"
			"#define FORD(i,a,b) for(ll i=(a);i>=(b);i--)"
			"#define vec2(name,i,j,k) vector<vector<ll>> name(i,vector<ll>(j,k))"
			"#define vec3(name,i,j,k,l) vector<vector<vector<ll>>> name(i,vector<vector<ll>>(j,vector<ll>(k,l)))"
			"#define pb push_back"
			"#define MOD 1000000007 //998244353"
			"#define PI 3.141592653"
			"#define INF 100000000000000 //14"
			"//cin.tie(0);cout.tie(0);ios::sync_with_stdio(false);"
			"int main(){"
			""
			"}"
		],
		"description": ""
	},

	"prioritysetqueue": {
		"prefix": "prioritysetqueue",
		"body": [
			"auto c=[](int l, int r){//lがrより優先度が低くなる条件を記入};"
			"priority_queue<int,vector<int>, decltype(c)> q(c);"
		],
		"description": ""
	},

	"lcm": {
		"prefix": "lcm",
		"body": [
			"ll lcm(ll x, ll y){"
			"	return x/__gcd(x,y)*y;"
			"}"
		],
		"description": ""
	},

	"kruskal": {
		"prefix": "kruskal",
		"body": [
			"ll ans = 0;"
			"UnionFind uf(v);"
			"while (q.size()>0){"
			"	ll nweight = q.top().at(0);"
			"	ll nindex = q.top().at(1);"
			"	if (uf.find(conn[nindex][0])!=uf.find(conn[nindex][1])){"
			"		uf.unite(conn[nindex][0],conn[nindex][1]);"
			"		ans += nweight;"
			"	}"
			"	q.pop();""
			"}"
		],
		"description": ""
	},

	"bitcnt": {
		"prefix": "bitcnt",
		"body": [
			"ll bitcnt(ll x){"
			"	ll cnt = 0;"
			"	REP(i,N) if ((x>>i)&1ll) cnt++;"
			"	return cnt;"
			"}"
		],
		"description": ""
	},

	"binarysearch": {
		"prefix": "binarysearch",
		"body": [
			"vector<ll> a(110000,-1);"
			"bool isOK(ll index, ll key){"
    		"	if (a.at(index) < key) return true;"
    		"	else return false;"
			"}"
			""
			"ll binse(ll key, ll sizem){"
			"	ll left = -1;"
			"	ll right = sizem;"
			"	while (right-left>1){"
			"		ll mid = left+(right-left)/2;"
			"		if (isOK(mid, key)) right = mid;"
			"		else left = mid;"
			"	}"
			"	return right;"
			"}"
		],
		"description": ""
	},

	"strll": {
		"prefix": "",
		"body": [
		],
		"description": ""
	},

	"combination": {
		"prefix": "combination",
		"body": [
			"ll kaijyo[101010];"//上限調節3箇所
			"ll gaijyo[101010];"
			""
			"ll powe(ll a, ll b){//aのb乗のmod"
			"	ll ret = 1;"
			"	while(0 < b){"
			"		if((b%2) == 0){"
			"			a = (a*a)%MOD;"
			"			b >>= 1;"
			"		}"
			"		else{"
			"			ret = (ret*a)%MOD;"
			"			b--;"
			"		}"
			"	}"
			"	return ret;"
			"}"
			""
			"void runfirst(){ //必ず回す!!"
			"	kaijyo[0] = 1;"
			"	gaijyo[0] = 1;"
			"	FOR(i,1,101009) {"
			"		kaijyo[i] = (kaijyo[i-1]*i)%MOD;"
			"		gaijyo[i] = powe(kaijyo[i],MOD-2);"
			"	}"
			"}"
			""
			"ll C(ll m, ll n){"
			"	return (kaijyo[m]*((powe(kaijyo[m-n],MOD-2) * powe(kaijyo[n],MOD-2))%MOD)%MOD);"
			"}"
			""
			"//runfirst()を忘れずに。""
		],
		"description": ""
	},

	"kmp": {
		"prefix": "kmp",
		"body": [
			"ll kmp(vector<ll> x, vector<ll> y){ //xの中からyを探してxの中の開始位置を返す、なければ-1"
			"	ll cntx = 0;"
			"	ll cnty = 0;"
			"	ll lenx = x.size();"
			"	ll leny = y.size();"
			"	vector<ll> changecntx(leny,0); //一致しなかったらcntxにこの値を足す"
			"	vector<ll> changecnty(leny,0); //一致しなかったらcntyをこの値に変える"
			"	ll repcheck = 0;"
			"	changecntx.at(0) = 1;"
			"	FOR(i,1,leny-1){"
			"		if (y.at(i) == y.at(repcheck)){"
			"			repcheck++;"
			"		}"
			"		else{"
			"			changecnty.at(i) = repcheck;"
			"			repcheck = 0;"
			"		}"
			"	}"
			"	while (cnty < leny){"
			"		if (cntx == lenx){"
			"			return -1;"
			"		}"
			"		else if (x.at(cntx) == y.at(cnty)){"
			"			cntx++;"
			"			cnty++;"
			"		}"
			"		else{"
			"			cntx += changecntx.at(cnty);"
			"			cnty = changecnty.at(cnty);"
			"		}"
			"	}"
			"	return cntx-cnty;"
			"}"
			"//注意!! 頭のvectorの要素のデータ型を適宜変更!!"
		],
		"description": ""
	},

	"ufcnt": {
		"prefix": "ufcnt",
		"body": [
			"struct UnionFind {//leaderのtableが部下の数を返すtype"
			"	vector<ll> table;"
			""
			"	UnionFind(ll n) : table(n) { //tableはleaderなら部下の数、そうでなければ所属する上司"
			"		for (ll i = 0; i < n; i++) table[i] = -1;"
			"	}"
			""
			"	ll find(ll x){ //leaderの番号を返す"
			"		if (table[x] < 0){"
			"			return x; //tableの値が負の場合はleaderなので自分"
			"		}"
			"		else{"
			"			table[x] = find(table[x]); //xのleader"
			"			return table[x];"
			"		}"
			"	}"
			""
			"	void unite(ll x, ll y){ //xとyをつなげる"
			"		ll s1 = find(x); //xのleader"
			"		ll s2 = find(y); //yのleader"
			"		if (s1 != s2){"
			"			if (table[s1] > table[s2]){ //xの木のほうが長い場合はxにyをくっつける"
			"				table[s2] += table[s1];"
			"				table[s1] = s2;"
			"			}"
			"			else if (table[s2] > table[s1]){"
			"				table[s1] += table[s2];"
			"				table[s2] = s1;"
			"			}"
			"			else{"
			"				table[s1] += table[s2];"
			"				table[s2] = s1;"
			"			}"
			"		}"
			"		return;"
			"	}"
			"}; //structの最後には;が必要!!"
		],
		"description": ""
	},

	"uflen": {
		"prefix": "uflen",
		"body": [
			"struct UnionFind { //leaderのtableが部下の数を返すtype"
			"	vector<ll> table;"
			""
			"	UnionFind(ll n) : table(n) { //tableはleaderなら枝のうち一番長い部分の長さ、そうでなければ所属する上司"
			"		for (ll i = 0; i < n; i++) table[i] = -1;"
			"	}"
			""
			"	ll find(ll x){ //leaderの番号を返す"
			"		if (table[x] < 0){"
			"			return x; //tableの値が負の場合はleaderなので自分"
			"		}"
			"		else{"
			"			table[x] = find(table[x]); //xのleader"
			"			return table[x];"
			"		}"
			"	}"
			""
			"	void unite(ll x, ll y){ //xとyをつなげる"
			"		ll s1 = find(x); //xのleader"
			"		ll s2 = find(y); //yのleader"
			"		if (s1 != s2){"
			"			if (table[s1] > table[s2]){ //xの木のほうが長い場合はxにyをくっつける"
			"				table[s1] = s2;"
			"			}"
			"			else if (table[s2] > table[s1]){"
			"				table[s2] = s1;"
			"			}"
			"			else{"
			"				table[s2] = s1;"
			"				table[s1]--;"
			"			}"
			"		}"
			"		return;"
			"	}"
			"}; //structの最後には;が必要!!"
		],
		"description": ""
	},
	"segtree": {
		"prefix": "segtree",
		"body": [
			"vector<ll> seg(powe(2,19),0);"
			"void add(ll ind, ll v){"
    		"	ind+=powe(2,18);"
    		"	seg[ind]=v;"
   			"	while(true){"
    		"	    ind/=2;"
    		"		if (ind==0) break;"
        	"		seg[ind]=max(seg[ind*2],seg[ind*2+1]);"
    		"	}"
			"}"
			"ll query(ll l, ll r){"
    		"	ll po = powe(2,18);"
    		"	l+=powe(2,18);"
    		"	r+=powe(2,18);"
    		"	ll ans=seg[l];"
    		"	while(l<r){"
        	"		if(l%2){"
            "			ans=max(ans,seg[l]);"
            "			l++;"
        	"		}"
        	"		l/=2;"
        	"		if(r%2){"
            "			ans=max(ans,seg[r-1]);"
            "			r--;"
        	"		}"
        	"		r/=2;"
    		"	};"
    		"	return ans;"
			"}"
		],
		"description": ""
	},
	"isprime": {
		"prefix": "isprime",
		"body": [
			"bool isPrime(ll x){"
			"	double y = sqrt((double)x);"
			"	ll b = y;"
			"	FOR(i,2,b) if (!(x%i)) return false;"
			"	return true;"
			"}"
		],
		"description": ""
	},
	"dist": {
		"prefix": "distance",
		"body": [
			"ld dist(ld x1, ld y1, ld x2, ld y2){"
			"	return (ld)sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))"
			"}"
		],
		"description": ""
	}
}